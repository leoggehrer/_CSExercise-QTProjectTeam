//@CustomCode
namespace QTProjectTeam.Logic.Controllers.App
{
    using System.Collections.Generic;
    using TEntity = Entities.App.Project;
    using TOutModel = Models.App.Project;
    ///
    /// Generated by the generator
    ///
    
    public sealed partial class ProjectsController : EntitiesController<TEntity, TOutModel>, Contracts.App.IProjectsAccess<TOutModel>
    {
        ///
        /// Generated by the generator
        ///
        static ProjectsController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();

        internal override IEnumerable<string> Includes => new string[] { nameof(TEntity.Members) };
        ///
        /// Generated by the generator
        ///
        public ProjectsController()
        {
            Constructing();
            
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        public ProjectsController(ControllerObject other)
        : base(other)
        {
            Constructing();
            
            Constructed();
        }

        public async Task<TOutModel?> AddMemberAsync(int projectId, int memberId)
        {
            var project = await GetByIdAsync(projectId).ConfigureAwait(false);

            if (project != null)
            {
                using var memberCtrl = new MembersController(this);
                var member = await memberCtrl.GetByIdAsync(memberId).ConfigureAwait(false);

                if (member != null)
                {
                    var checkMember = project.Members.FirstOrDefault(e => e.Id == memberId);

                    if (checkMember == null)
                    {
                        project.Members.Add(member);

                        await UpdateAsync(project).ConfigureAwait(false);
                        await SaveChangesAsync();
                    }
                }
            }
            return project;
        }

    }
}
